# ===============================================================
# DASHBOARD EXPLORATORIO ‚Äì ESTADO F√çSICO
# Autores: Johan D√≠az y David M√°rquez
# ===============================================================

import os
import pandas as pd
import numpy as np
from dash import Dash, dcc, html, dash_table, Input, Output
import dash_bootstrap_components as dbc
import plotly.express as px
from scipy import stats

# ===============================================================
# CONFIGURACI√ìN INICIAL
# ===============================================================
app = Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])
server = app.server  # ‚úÖ Necesario para Render / Gunicorn

app.title = "Dashboard EDA ‚Äì Estado F√≠sico"

# ===============================================================
# LECTURA DE DATOS
# ===============================================================
# Opci√≥n 1: dataset p√∫blico en GitHub (recomendada)
url = "https://raw.githubusercontent.com/johand-lopez/eda-estado-fisico/main/fitness_dataset.csv"
df = pd.read_csv(url)

# ===============================================================
# LIMPIEZA DE DATOS
# ===============================================================
# Imputaci√≥n de valores faltantes
df["sleep_hours"] = df["sleep_hours"].fillna(df["sleep_hours"].median())

# ===============================================================
# DESCRIPCI√ìN DEL CONJUNTO DE DATOS
# ===============================================================
descripcion_variables = pd.DataFrame({
    "Variable": [
        "age", "height_cm", "weight_kg", "heart_rate", "blood_pressure",
        "sleep_hours", "nutrition_quality", "activity_index", "is_fit"
    ],
    "Descripci√≥n": [
        "Edad", "Altura", "Peso", "Frecuencia card√≠aca", "Presi√≥n arterial",
        "Horas de sue√±o", "Calidad nutricional", "√çndice de actividad", "Estado f√≠sico"
    ],
    "Unidad": [
        "a√±os", "cm", "kg", "bpm", "mmHg", "horas", "escala 1-10", "escala 1-10", "-"
    ],
    "Tipo": [
        "Num√©rica", "Num√©rica", "Num√©rica", "Num√©rica", "Num√©rica",
        "Num√©rica", "Num√©rica", "Num√©rica", "Categ√≥rica"
    ]
})

# ===============================================================
# FUNCIONES AUXILIARES
# ===============================================================
def resumen_estadistico(df):
    resumen = df.describe().T
    resumen["missing_%"] = df.isnull().mean() * 100
    return resumen.reset_index().rename(columns={"index": "Variable"})

# ===============================================================
# COMPONENTES DEL DASHBOARD
# ===============================================================

# --- Contexto y Dise√±o ---
contexto = html.Div([
    html.H3("Objetivo del an√°lisis", className="mt-4"),
    html.P("""
        Clasificar si una persona tiene un buen estado f√≠sico o no,
        bas√°ndose en variables fisiol√≥gicas y de estilo de vida.
        Los datos provienen de un conjunto sint√©tico generado con fines educativos.
        Fuente: Kaggle ‚Äì Fitness Classification Dataset.
    """),
    html.Hr(),
    html.H4("Diccionario de Variables"),
    dash_table.DataTable(
        data=descripcion_variables.to_dict("records"),
        columns=[{"name": i, "id": i} for i in descripcion_variables.columns],
        style_table={"overflowX": "auto"},
        style_header={"backgroundColor": "#2C3E50", "color": "white", "fontWeight": "bold"},
        style_cell={"textAlign": "left", "padding": "5px"},
    )
])

# --- ETL y Limpieza ---
etl = html.Div([
    html.H3("ETL: Extracci√≥n, Transformaci√≥n y Limpieza de Datos"),
    html.P("A continuaci√≥n se muestran los valores faltantes por variable y la distribuci√≥n tras la imputaci√≥n."),
    dcc.Graph(figure=px.bar(
        df.isnull().sum().reset_index().rename(columns={"index": "Variable", 0: "Nulos"}),
        x="Variable", y="Nulos",
        title="Conteo de valores faltantes por variable",
        color_discrete_sequence=["#34495E"]
    )),
    html.H4("Validaci√≥n de Imputaci√≥n"),
    html.P("Comprobamos que la imputaci√≥n no alter√≥ significativamente la distribuci√≥n de las horas de sue√±o."),
    dcc.Graph(figure=px.histogram(df, x="sleep_hours", nbins=20, color="is_fit",
                                  title="Distribuci√≥n de horas de sue√±o por estado f√≠sico",
                                  color_discrete_sequence=px.colors.qualitative.Safe)),
    html.H4("Prueba de Normalidad (Kolmogorov‚ÄìSmirnov)"),
    html.P("Se eval√∫a si la variable 'sleep_hours' sigue una distribuci√≥n normal."),
])

# --- An√°lisis Descriptivo y Relacional ---
analisis = html.Div([
    html.H3("An√°lisis Descriptivo y Relacional"),
    dcc.Graph(figure=px.scatter_matrix(
        df, dimensions=["age", "height_cm", "weight_kg", "heart_rate", "activity_index"],
        color="is_fit", title="Matriz de dispersi√≥n de variables fisiol√≥gicas"
    )),
    html.H4("Correlaciones"),
    dcc.Graph(figure=px.imshow(df.corr(numeric_only=True), text_auto=True,
                               color_continuous_scale="Blues", title="Matriz de correlaci√≥n"))
])

# --- Conclusiones e Insights ---
conclusiones = html.Div([
    html.H3("Conclusiones e Insights"),
    html.Ul([
        html.Li("La edad y la frecuencia card√≠aca muestran relaci√≥n inversa con el estado f√≠sico."),
        html.Li("Las personas con m√°s horas de sue√±o y mayor √≠ndice de actividad presentan mejor estado f√≠sico."),
        html.Li("La imputaci√≥n de valores faltantes en horas de sue√±o no modific√≥ la distribuci√≥n original."),
        html.Li("Las correlaciones moderadas indican independencia entre la mayor√≠a de las variables, favoreciendo el modelado posterior."),
        html.Li("El dataset es adecuado para construir un modelo de clasificaci√≥n en fases posteriores."),
    ])
])

# ===============================================================
# LAYOUT PRINCIPAL CON PESTA√ëAS
# ===============================================================
app.layout = dbc.Container([
    html.Br(),
    html.H2("üìä Dashboard Exploratorio ‚Äì Estado F√≠sico", className="text-center text-primary fw-bold"),
    html.P("EDA interactivo basado en datos fisiol√≥gicos y h√°bitos de salud.", className="text-center text-secondary"),
    html.Hr(),
    dcc.Tabs([
        dcc.Tab(label="Contexto y Dise√±o", children=[contexto]),
        dcc.Tab(label="ETL y Limpieza", children=[etl]),
        dcc.Tab(label="An√°lisis Descriptivo y Relacional", children=[analisis]),
        dcc.Tab(label="Conclusiones e Insights", children=[conclusiones]),
    ])
], fluid=True)

# ===============================================================
# EJECUCI√ìN LOCAL / RENDER
# ===============================================================
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8050))
    app.run_server(debug=False, host="0.0.0.0", port=port)
